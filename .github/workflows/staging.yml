# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  staging:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      APP_NAME: unjam-frontend
      DOMAIN: app.unj.am
      APP_URL: https://app.unj.am/app
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      STRIPE_TABLE_ID: ${{ secrets.STRIPE_TABLE_ID }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      GH_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_REF }}
      AUTO_COMPLETE_TIMEOUT_SECONDS: 1800
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'

      # Install npm dependencies
      - name: Install dependencies
        run: npm ci

      # Install Deno for edge functions
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      # Run unit tests
      - name: Run unit tests
        run: npm test

      # Run Cypress tests using the official GitHub Action
#      - name: Cypress run
#        uses: cypress-io/github-action@v6
#        env:
#          NODE_ENV: 'development'
#          VITE_USE_LOCAL_AUTH: 'true'
#        with:
#          start: npm run dev:edge, npm run dev:unified
#          wait-on: 'http://localhost:5175'
#          wait-on-timeout: 120
#          browser: chrome
#          command: npm run cypress:run

      # Upload Cypress screenshots on failure
#      - name: Upload Cypress screenshots
#        uses: actions/upload-artifact@v4
#        if: failure()
#        with:
#          name: cypress-screenshots
#          path: cypress/screenshots/
#          if-no-files-found: ignore

      - name: Build and upload extension to Supabase
        env:
          VITE_SUPABASE_URL: ${{ env.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ env.SUPABASE_ANON_KEY }}
          VITE_STRIPE_TABLE_ID: ${{ env.STRIPE_TABLE_ID }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ env.STRIPE_PUBLISHABLE_KEY }}
          VITE_GH_CLIENT_ID: ${{ env.GH_CLIENT_ID }}
          VITE_APP_URL: ${{ env.APP_URL }}
          VITE_AUTO_COMPLETE_TIMEOUT_SECONDS: ${{ env.AUTO_COMPLETE_TIMEOUT_SECONDS }}
        run: |
          # Create .env.production file for the build
          echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" > .env.production
          echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env.production
          echo "VITE_STRIPE_TABLE_ID=$VITE_STRIPE_TABLE_ID" >> .env.production
          echo "VITE_STRIPE_PUBLISHABLE_KEY=$VITE_STRIPE_PUBLISHABLE_KEY" >> .env.production
          echo "VITE_GH_CLIENT_ID=$VITE_GH_CLIENT_ID" >> .env.production
          echo "VITE_APP_URL=$VITE_APP_URL" >> .env.production
          echo "VITE_AUTO_COMPLETE_TIMEOUT_SECONDS=$VITE_AUTO_COMPLETE_TIMEOUT_SECONDS" >> .env.production

          # Build the extension
          npm run build:ext
          npm run zip:ext

          # Find the generated zip file
          ZIP_FILE=$(find .output -name "*.zip" -type f | head -n 1)

          if [ -z "$ZIP_FILE" ]; then
            echo "Error: No zip file found in .output directory"
            exit 1
          fi

          echo "Found extension zip: $ZIP_FILE"

          # Extract filename from path
          FILENAME=$(basename "$ZIP_FILE")
          echo "FILENAME=$FILENAME"

          # Set environment variable for subsequent steps
          echo "EXTENSION_ZIP_FILENAME=${FILENAME}" >> $GITHUB_ENV
          echo "ZIP_FILE=${ZIP_FILE}" >> $GITHUB_ENV

      - name: Upload extension to Supabase Storage
        run: |
          npx tsx upload-extension.ts \
            --url "${{ env.SUPABASE_URL }}" \
            --key "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            --file "${{ env.ZIP_FILE }}" \
            --name "${{ env.EXTENSION_ZIP_FILENAME }}"

      - name: Build Docker image locally
        run: |
          docker build -f ./deploy/Dockerfile \
            --build-arg EXTENSION_ZIP_FILENAME=${{ env.EXTENSION_ZIP_FILENAME }} \
            -t ${{ env.APP_NAME }}:latest .
          docker save ${{ env.APP_NAME }}:latest -o /tmp/image.tar
          ls -la /tmp/image.tar

      - name: Transfer Docker image to server
        run: |
          echo "${{ secrets.SVR_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no /tmp/image.tar ${{ secrets.SVR_USERNAME }}@${{ secrets.SVR_HOST }}:/tmp/
          rm /tmp/ssh_key

      - name: Transfer deployment files to server
        run: |
          echo "${{ secrets.SVR_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

          # Create deployment directory on server
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ${{ secrets.SVR_USERNAME }}@${{ secrets.SVR_HOST }} "mkdir -p /opt/unjam"

          # Transfer files
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no deploy/docker-compose.yml ${{ secrets.SVR_USERNAME }}@${{ secrets.SVR_HOST }}:/opt/unjam/
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no deploy/nginx-reverse-proxy.conf ${{ secrets.SVR_USERNAME }}@${{ secrets.SVR_HOST }}:/opt/unjam/
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no deploy/zero-downtime-deploy.sh ${{ secrets.SVR_USERNAME }}@${{ secrets.SVR_HOST }}:/opt/unjam/
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no deploy/process-payments-cron.sh ${{ secrets.SVR_USERNAME }}@${{ secrets.SVR_HOST }}:/opt/unjam/

          rm /tmp/ssh_key

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SVR_HOST }}
          username: ${{ secrets.SVR_USERNAME }}
          key: ${{ secrets.SVR_PRIVATE_KEY }}
          envs: APP_NAME,DOMAIN,APP_URL,LETSENCRYPT_EMAIL,SUPABASE_URL,SUPABASE_ANON_KEY,STRIPE_TABLE_ID,STRIPE_PUBLISHABLE_KEY,GH_CLIENT_ID,EXTENSION_ZIP_FILENAME,AUTO_COMPLETE_TIMEOUT_SECONDS,SUPABASE_SERVICE_ROLE_KEY
          script: |
            # Update system packages
            apt update

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              apt install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt update
              apt install -y docker-ce docker-ce-cli containerd.io
              systemctl start docker
              systemctl enable docker
              echo "Docker installed successfully"
            else
              echo "Docker already installed"
            fi

            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              echo "Docker Compose installed successfully"
            else
              echo "Docker Compose already installed"
            fi

            # Load Docker image from tar file
            docker load -i "/tmp/image.tar"

            # Create .env.production file
            echo "VITE_SUPABASE_URL=$SUPABASE_URL" > /opt/unjam/.env.production
            echo "VITE_SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> /opt/unjam/.env.production
            echo "VITE_STRIPE_TABLE_ID=$STRIPE_TABLE_ID" >> /opt/unjam/.env.production
            echo "VITE_STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY" >> /opt/unjam/.env.production
            echo "VITE_GH_CLIENT_ID=$GH_CLIENT_ID" >> /opt/unjam/.env.production
            echo "VITE_APP_URL=$APP_URL" >> /opt/unjam/.env.production
            echo "VITE_EXTENSION_ZIP_FILENAME=$EXTENSION_ZIP_FILENAME" >> /opt/unjam/.env.production
            echo "VITE_AUTO_COMPLETE_TIMEOUT_SECONDS=$AUTO_COMPLETE_TIMEOUT_SECONDS" >> /opt/unjam/.env.production

            # Make deploy script executable
            chmod +x /opt/unjam/zero-downtime-deploy.sh

            cd /opt/unjam

            # First time setup - start services
            if ! docker ps | grep -q "nginx"; then
              echo "First time setup - starting services..."
              docker-compose up -d

              # Wait for services to be ready
              sleep 10

              # Install Certbot and setup SSL
              if ! command -v certbot &> /dev/null; then
                apt install -y certbot
              fi

              # Setup external nginx reverse proxy with SSL
              if [ ! -f "/etc/nginx/sites-available/$DOMAIN" ]; then
                apt install -y nginx

                cat > "/etc/nginx/sites-available/$DOMAIN" <<EOF
            server {
                listen 80;
                server_name $DOMAIN;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
                ln -sf "/etc/nginx/sites-available/$DOMAIN" /etc/nginx/sites-enabled/
                systemctl enable nginx
                systemctl start nginx
                nginx -t && systemctl reload nginx

                # Get SSL certificate
                certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --email "$LETSENCRYPT_EMAIL"
              fi
            else
              # Zero-downtime deployment
              echo "Running zero-downtime deployment..."
              /opt/unjam/zero-downtime-deploy.sh
            fi

            # Setup cron job for ticket payments
            echo "Setting up cron job for ticket payments..."

            # Create secure environment file for cron with restricted permissions
            cat > /opt/unjam/.env.cron <<EOF
            SUPABASE_URL=$SUPABASE_URL
            SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
            EOF

            # Set strict permissions (only root can read/write)
            chmod 600 /opt/unjam/.env.cron

            # Make cron script executable
            chmod +x /opt/unjam/process-payments-cron.sh

            # Install cron if not installed
            if ! command -v cron &> /dev/null; then
              apt install -y cron
              systemctl enable cron
              systemctl start cron
            fi

            # Add cron job (runs every 5 minutes)
            # Remove existing cron job if it exists
            crontab -l 2>/dev/null | grep -v "process-payments-cron.sh" | crontab -

            # Add new cron job
            (crontab -l 2>/dev/null; echo "*/5 * * * * /opt/unjam/process-payments-cron.sh >> /var/log/ticket-payments-cron.log 2>&1") | crontab -

            echo "Cron job installed successfully"

            # Clean up
            rm -f "/tmp/image.tar"
            docker image prune -f
