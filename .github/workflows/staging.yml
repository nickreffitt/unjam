# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  staging:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      APP_NAME: unjam-frontend
      DOMAIN: unjam.nickreffitt.com
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'

      # Install npm dependencies
      - name: Install dependencies
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ env.APP_NAME }}.tar

      - name: Copy Docker image to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SVR_HOST }}
          username: ${{ secrets.SVR_USERNAME }}
          key: ${{ secrets.SVR_PRIVATE_KEY }}
          source: "/tmp/${{ env.APP_NAME }}.tar"
          target: "/tmp/"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SVR_HOST }}
          username: ${{ secrets.SVR_USERNAME }}
          key: ${{ secrets.SVR_PRIVATE_KEY }}
          envs: APP_NAME,DOMAIN,LETSENCRYPT_EMAIL
          script: |
            # Update system packages
            apt update

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              apt install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt update
              apt install -y docker-ce docker-ce-cli containerd.io
              systemctl start docker
              systemctl enable docker
              echo "Docker installed successfully"
            else
              echo "Docker already installed"
            fi

            # Install Nginx if not installed
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              apt install -y nginx
              systemctl start nginx
              systemctl enable nginx
              echo "Nginx installed successfully"
            else
              echo "Nginx already installed"
            fi

            # Install Certbot if not installed
            if ! command -v certbot &> /dev/null; then
              echo "Installing Certbot..."
              apt install -y certbot python3-certbot-nginx
              echo "Certbot installed successfully"
            else
              echo "Certbot already installed"
            fi

            # Load Docker image from tar file
            docker load -i "/tmp/$APP_NAME.tar"

            # Stop and remove existing container
            docker stop "$APP_NAME" || true
            docker rm "$APP_NAME" || true

            # Run the new container
            docker run -d --name "$APP_NAME" --restart unless-stopped -p 3000:80 "$APP_NAME:latest"

            # Clean up any broken nginx symlinks
            find /etc/nginx/sites-enabled -type l -exec test ! -e {} \; -delete

            # Set up nginx configuration if it doesn't exist
            if [ ! -f "/etc/nginx/sites-available/$DOMAIN" ]; then
              tee "/etc/nginx/sites-available/$DOMAIN" > /dev/null <<EOF
            server {
                listen 80;
                server_name $DOMAIN;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF

              # Enable the site
              ln -sf "/etc/nginx/sites-available/$DOMAIN" /etc/nginx/sites-enabled/
              nginx -t && systemctl reload nginx

              # Get SSL certificate
              certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --email "$LETSENCRYPT_EMAIL"
            fi

            # Clean up transferred tar file and old images
            rm -f "/tmp/$APP_NAME.tar"
            docker image prune -f